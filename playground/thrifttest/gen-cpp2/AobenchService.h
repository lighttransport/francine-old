/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/wangle/Future.h>
#include "aobench_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>



namespace aobench { namespace cpp2 {

class AobenchServiceSvAsyncIf {
 public:
  virtual ~AobenchServiceSvAsyncIf() {}
  virtual void async_tm_render(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t width, int32_t height, int32_t nsubsamples) = 0;
  virtual void async_render(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t width, int32_t height, int32_t nsubsamples) = delete;
};

class AobenchServiceAsyncProcessor;

class AobenchServiceSvIf : public AobenchServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef AobenchServiceAsyncProcessor ProcessorType;

  virtual ~AobenchServiceSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_render(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void async_tm_render(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t width, int32_t height, int32_t nsubsamples);
};

class AobenchServiceSvNull : public AobenchServiceSvIf {
 public:
  virtual ~AobenchServiceSvNull() {}
  virtual void render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples);
};

class AobenchServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  AobenchServiceSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (AobenchServiceAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static AobenchServiceAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (AobenchServiceAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static AobenchServiceAsyncProcessor::compactProcessMap compactProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_render(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_render(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_render(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx, std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_render(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_render(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  AobenchServiceAsyncProcessor(AobenchServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~AobenchServiceAsyncProcessor() {}
};

class AobenchServiceAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~AobenchServiceAsyncClient() {}

  AobenchServiceAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void render(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void callback_render(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void render(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void sync_render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void sync_render(const apache::thrift::RpcOptions& rpcOptions, std::string& _return, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void render(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t width, int32_t height, int32_t nsubsamples);
  virtual void functor_render(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t width, int32_t height, int32_t nsubsamples);
  virtual folly::wangle::Future<std::string> future_render(int32_t width, int32_t height, int32_t nsubsamples);
  virtual folly::wangle::Future<std::string> future_render(const apache::thrift::RpcOptions& rpcOptions, int32_t width, int32_t height, int32_t nsubsamples);
  static folly::exception_wrapper recv_wrapped_render(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_render(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_render(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_render(std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void renderT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_renderT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_renderT(Protocol_* prot, std::string& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class AobenchService_render_args : private boost::totally_ordered<AobenchService_render_args> {
 public:

  AobenchService_render_args() :
      width(0),
      height(0),
      nsubsamples(0) {}
  // FragileConstructor for use in initialization lists only

  AobenchService_render_args(apache::thrift::FragileConstructor, int32_t width__arg, int32_t height__arg, int32_t nsubsamples__arg) :
      width(std::move(width__arg)),
      height(std::move(height__arg)),
      nsubsamples(std::move(nsubsamples__arg)) {}

  AobenchService_render_args(AobenchService_render_args&&) = default;

  AobenchService_render_args(const AobenchService_render_args&) = default;

  AobenchService_render_args& operator=(AobenchService_render_args&&) = default;

  AobenchService_render_args& operator=(const AobenchService_render_args&) = default;
  void __clear();

  virtual ~AobenchService_render_args() throw() {}

  int32_t width;
  int32_t height;
  int32_t nsubsamples;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      width = false;
      height = false;
      nsubsamples = false;
    }

    bool width;
    bool height;
    bool nsubsamples;
  } __isset;
  bool operator==(const AobenchService_render_args& rhs) const;

  bool operator < (const AobenchService_render_args& rhs) const {
    if (!(width == rhs.width)) {
      return width < rhs.width;
    }
    if (!(height == rhs.height)) {
      return height < rhs.height;
    }
    if (!(nsubsamples == rhs.nsubsamples)) {
      return nsubsamples < rhs.nsubsamples;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class AobenchService_render_pargs : private boost::totally_ordered<AobenchService_render_pargs> {
 public:
  virtual ~AobenchService_render_pargs() throw() {}

  int32_t* width;
  int32_t* height;
  int32_t* nsubsamples;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      width = false;
      height = false;
      nsubsamples = false;
    }

    bool width;
    bool height;
    bool nsubsamples;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class AobenchService_render_presult : private boost::totally_ordered<AobenchService_render_presult> {
 public:
  virtual ~AobenchService_render_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class AobenchService_render_result : private boost::totally_ordered<AobenchService_render_result> {
 public:

  AobenchService_render_result() {}
  // FragileConstructor for use in initialization lists only

  AobenchService_render_result(apache::thrift::FragileConstructor, std::string success__arg) :
      success(std::move(success__arg)) {}

  AobenchService_render_result(AobenchService_render_result&&) = default;

  AobenchService_render_result(const AobenchService_render_result&) = default;

  AobenchService_render_result& operator=(AobenchService_render_result&&) = default;

  AobenchService_render_result& operator=(const AobenchService_render_result&) = default;
  void __clear();

  virtual ~AobenchService_render_result() throw() {}

  std::string success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const AobenchService_render_result& rhs) const;

  bool operator < (const AobenchService_render_result& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}} // aobench::cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_args>::write(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_args>::read(Protocol* proto,   ::aobench::cpp2::AobenchService_render_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_args>::serializedSize(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_args>::serializedSizeZC(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_pargs>::write(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_pargs>::read(Protocol* proto,   ::aobench::cpp2::AobenchService_render_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_pargs>::serializedSize(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_pargs>::serializedSizeZC(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_presult>::write(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_presult>::read(Protocol* proto,   ::aobench::cpp2::AobenchService_render_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_presult>::serializedSize(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_presult>::serializedSizeZC(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_result>::write(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_result>::read(Protocol* proto,   ::aobench::cpp2::AobenchService_render_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_result>::serializedSize(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::aobench::cpp2::AobenchService_render_result>::serializedSizeZC(Protocol* proto, const  ::aobench::cpp2::AobenchService_render_result* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift