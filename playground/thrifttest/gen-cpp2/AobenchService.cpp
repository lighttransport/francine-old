/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AobenchService.h"

#include "AobenchService.tcc"

namespace aobench { namespace cpp2 {

std::unique_ptr<apache::thrift::AsyncProcessor> AobenchServiceSvIf::getProcessor() {
  return std::unique_ptr<apache::thrift::AsyncProcessor>(new AobenchServiceAsyncProcessor((AobenchServiceSvIf*)this));
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AobenchServiceSvIf::getprio_render(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio0 = reqCtx->getCallPriority();
  if (prio0 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio0;
  }
  return apache::thrift::concurrency::NORMAL;
}

void AobenchServiceSvIf::render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples) {
  throw apache::thrift::TApplicationException("Function render is unimplemented");
}

void AobenchServiceSvIf::async_tm_render(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::string>>> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  auto callbackp = callback.release();
  if (!callbackp->isRequestActive()) {
    callbackp->deleteInThread();
    return;
  }
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr<std::string> _return(new std::string);
    render(*_return, width, height, nsubsamples);
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

void AobenchServiceSvNull::render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples) {}

std::string AobenchServiceAsyncProcessor::getServiceName() {
  return "AobenchService";
}

void AobenchServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot(new apache::thrift::BinaryProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = binaryProcessMap_.find(fname);
      if (pfn == binaryProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::CompactProtocolReader> iprot(new apache::thrift::CompactProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = compactProcessMap_.find(fname);
      if (pfn == compactProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      return;
      break;
    }
  }
}

bool AobenchServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  apache::thrift::protocol::PROTOCOL_TYPES protType = static_cast<apache::thrift::protocol::PROTOCOL_TYPES>(header->getProtocolId());
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      break;
    }
  }
  return false;
}

std::unordered_set<std::string> AobenchServiceAsyncProcessor::onewayMethods {};
AobenchServiceAsyncProcessor::binaryProcessMap AobenchServiceAsyncProcessor::binaryProcessMap_ {
  {"render", &AobenchServiceAsyncProcessor::_processInThread_render<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
AobenchServiceAsyncProcessor::compactProcessMap AobenchServiceAsyncProcessor::compactProcessMap_ {
  {"render", &AobenchServiceAsyncProcessor::_processInThread_render<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

std::string AobenchServiceAsyncClient::getServiceName() {
  return "AobenchService";
}

void AobenchServiceAsyncClient::render(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  render(::apache::thrift::RpcOptions(), std::move(callback), width, height, nsubsamples);
}

void AobenchServiceAsyncClient::callback_render(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  render(::apache::thrift::RpcOptions(), std::move(callback), width, height, nsubsamples);
}

void AobenchServiceAsyncClient::render(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      renderT(&writer, rpcOptions, std::move(callback), width, height, nsubsamples);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      renderT(&writer, rpcOptions, std::move(callback), width, height, nsubsamples);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AobenchServiceAsyncClient::sync_render(std::string& _return, int32_t width, int32_t height, int32_t nsubsamples) {
  sync_render(::apache::thrift::RpcOptions(), _return, width, height, nsubsamples);
}

void AobenchServiceAsyncClient::sync_render(const apache::thrift::RpcOptions& rpcOptions, std::string& _return, int32_t width, int32_t height, int32_t nsubsamples) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback1(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  render(rpcOptions, std::move(callback1), width, height, nsubsamples);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_render(_return, _returnState);
}

void AobenchServiceAsyncClient::render(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  render(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),width,height,nsubsamples);
}

void AobenchServiceAsyncClient::functor_render(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t width, int32_t height, int32_t nsubsamples) {
  render(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),width,height,nsubsamples);
}

folly::wangle::Future<std::string> AobenchServiceAsyncClient::future_render(int32_t width, int32_t height, int32_t nsubsamples) {
  return future_render(::apache::thrift::RpcOptions(), width, height, nsubsamples);
}

folly::wangle::Future<std::string> AobenchServiceAsyncClient::future_render(const apache::thrift::RpcOptions& rpcOptions, int32_t width, int32_t height, int32_t nsubsamples) {
  folly::wangle::Promise<std::string> promise2;
  auto future3 = promise2.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback4(new apache::thrift::FutureCallback<std::string>(std::move(promise2), recv_render));
  render(rpcOptions, std::move(callback4), width, height, nsubsamples);
  return std::move(future3);
}

folly::exception_wrapper AobenchServiceAsyncClient::recv_wrapped_render(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_renderT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_renderT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AobenchServiceAsyncClient::recv_render(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_render(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AobenchServiceAsyncClient::recv_instance_render(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_render(_return, state);
}

folly::exception_wrapper AobenchServiceAsyncClient::recv_instance_wrapped_render(std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_render(_return, state);
}

template uint32_t AobenchService_render_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t AobenchService_render_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t AobenchService_render_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t AobenchService_render_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void AobenchService_render_args::__clear() {
  width = 0;
  height = 0;
  nsubsamples = 0;
  __isset.__clear();
}

bool AobenchService_render_args::operator==(const AobenchService_render_args& rhs) const {
  if (!((width == rhs.width))) {
    return false;
  }
  if (!((height == rhs.height))) {
    return false;
  }
  if (!((nsubsamples == rhs.nsubsamples))) {
    return false;
  }
  return true;
}

template uint32_t AobenchService_render_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t AobenchService_render_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t AobenchService_render_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t AobenchService_render_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t AobenchService_render_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t AobenchService_render_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t AobenchService_render_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t AobenchService_render_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t AobenchService_render_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t AobenchService_render_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AobenchService_render_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t AobenchService_render_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AobenchService_render_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t AobenchService_render_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void AobenchService_render_result::__clear() {
  success = std::string();
  __isset.__clear();
}

bool AobenchService_render_result::operator==(const AobenchService_render_result& rhs) const {
  if (!(apache::thrift::StringTraits<std::string>::isEqual(success, rhs.success))) {
    return false;
  }
  return true;
}

}} // aobench::cpp2
namespace apache { namespace thrift {

}} // apache::thrift